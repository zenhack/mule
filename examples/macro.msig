# This is a sketch of what the API for our macro system might look like.
#
# The semantics of some of this, e.g. reification, are a bit unclear in
# terms of the operational behavior during expansion; where do we get the
# information from?
#
# Note that this uses some features that aren't yet implemented, in particular
# multi-argument unions (issue #3).
{
  , ast = {
      , type var
          "Variables. Kept abstract, can be examined with provided functions,
          like `reify`."

      , type label
          "A label, as used by unions and records."
          = text

      , type exp "Expressions." =
          | Var var                         # term variable
          | App exp exp                     # function application
          | GetField exp label              # field access
          | Fn pat exp                      # lambda
          | Match exp (list (Case pat exp)) # match expression
          | Record (list (Field label exp)) # record literal
          | List (list exp)                 # list literal
          | Tag label                       # a tag for a sum type
          | QQ exp                          # quasi-quoted expression
          | UnQ exp                         # unquoted expression
          | WithType exp typ                # type annotated expression

      , type typ "Types" =
          | Var var
          | App typ typ
          | Fn typ typ
          | All var typ
          | Record row
          | Union row
          | QQ typ
          | UnQ typ

      , type pat "Patterns" =
          | Or pat pat
          | Var var
          | App pat (list pat)
          | Tag label
          | QQ pat
          | UnQ pat
          | WithType pat typ
    }

  , type cmd a
    "An operation that executes during macro expansion."

  , type var_info
    "Information about a variable."
    = {
      , target
        # `target` describes the thing to which the variable refers.
          : Exp (maybe ast.exp)
          # The variable is a term-level variable. If the variable
          # is let-bound and the expression to which the variable
          # is bound is known this carries the expression.
          | Type (maybe ast.ty)
          # The variable is a type alias. If the type that the alias
          # refers to is known, it is described by the argument.
          | Free
          # The variable is not already in scope.
      }


  , reify : ast.var var-info
    "Get information about a variable."

  , new-type-var : cmd ast.var
    "Generate a fresh (unique) type variable."

  , new-exp-var : cmd ast.var
    "Generate a fresh (unique) term variable."
}
