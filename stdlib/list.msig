{
  , type t a
    "An ordered sequence of elements."

  , empty  : all a. t a
    "The empty list."

  , length : all a. t a -> int
    "O(1): Get the length of the list."

  , empty? : all a. t a -> import "bool".t
    "O(1): Check if the list is empty."

  , singleton : all a. a -> t a
    "Make a single element list."

  , left : one-end-ops
    "Operations treating the left as the front of the list."
  , right : one-end-ops
    "Operations treating the right as the front of the list."

  , type one-end-ops
    "Operations that concern one end of the list.

    In the docs for these functions, the 'front' of the list is the side
    we are biased towards, while the 'end' is the other end.
    " = {
      , push : all a. a -> t a -> t a
        "O(1): Add an element to the front of the list."
      , pop : all a. t a -> import "maybe".t { hd : a, tl : t a }
        "O(1): return the first element from the list, and the rest of the list."
      , drop : all a. int -> t a -> t a
        "O(log n): Drop the first n elements from this end of the list."
    # , take : all a. int -> t a -> t a
    #   "O(log n): Take the first n elements from this end of the list."
    # , peek : all a. t a -> maybe a
    #   "O(1): return the first element of the list, if any.
    # , slice : all a. int -> int -> t a -> t a
    #   """O(log n): Extract a sub-range of the list.
    #
    #    Precisely, `slice i len` extracts `len`elements starting at
    #    index `i` This is equivalent to `take len (drop i xs)`.
    #    """
    #  , index  : all a. int -> t a -> maybe a
    #    """O(log n): `index i` gets the `i`th element of a list.
    #
    #    returns `None` if there is no such element.
    #    """
    #
    #  , index! : all a. int -> a -> t a
    #    "Like `index`, but throws an exception if the item is not found."
    #
    #  , fold : all acc e. ({ accum : acc, elem : e } -> acc) -> acc -> t e -> acc
    #  , sort : (o : order) -> t o.t -> t o.t
    #    "Sort the list according to the ordering, in ascending order from
    #     front to back."
    #  , compare : (o : order) -> t o.t -> t o.t -> cmp-result
    #    "Compare two lists lexicographically, using the provided order to
    #    compare individual elements.
    #    "
    }

  , append : all a. t a -> t a -> t a
    "O(log n): Append two lists."

#  , filter : all a. (a -> bool) -> t a -> t a
  , map    : all a b. (a -> b) -> t a -> t b
#
#  , fold       : (r : reducer) : t r.t -> r.t
#  , fold-map   : all a. (r : reducer) -> (a -> r.t) -> r.t

  , reverse : all a. t a -> t a
#
#  , intersperse : all a. a -> t a -> t a
#  , join : (r : reducer) -> r.t -> t r.t -> r.t
}
