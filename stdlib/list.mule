# The current implementation is a standard cons list. As such, many of
# the complexity bounds in the .msig are wrong. The plan is to replace
# this with a better data structure down the line, so those comments
# are aspirational.
{
  , type t a = Cons { hd : a, tl : t a } | Nil {}

  , empty = Nil {}

  , length =
      let go =
        fn accum list. match list with
          | Nil _ -> accum
          | Cons l -> go (int.add accum 1) l.tl
        end
      in
      go 0

  , empty? =
      fn list. match list with
        | Nil _ -> True {}
        | Cons _ -> False {}
      end

  , singleton = fn x. left.push x empty

  , left = {
      , push =
          fn x xs. Cons {
            , hd = x
            , tl = xs
          }

      , drop =
          fn count list. match list with
            | Nil _ -> Nil {}
            | Cons l ->
                match int.compare count 0 with
                  | GT _ -> drop (int.sub count 1) l.tl
                  | _ -> list
                end
          end

    #  , take =
    #      fn count list. match list with
    #        | Nil _ -> Nil {}
    #        | Cons l -> match int.compare count 0 with
    #            | GT _ -> Cons {
    #                , hd = l.hd
    #                , tl = take (int.sub count 1) l.tl
    #              }
    #            | _ -> Nil {}
    #          end
    #      end
    }
  , right = {
      , push = fn x xs. append xs (singleton x)
      , drop = fn n xs. reverse (drop n (reverse xs))
    }

  , append =
      let go =
        fn l r. match l with
          | Nil _ -> r
          | Cons l -> go l.tl (left.push l.hd r)
        end
      in
      fn l r. go (reverse l) r

  , reverse =
      let go =
        fn accum list. match list with
          | Nil _ -> accum
          | Cons l -> go (left.push l.hd accum) l.tl
        end
      in
      go empty

  , map =
      fn f list. match list with
        | Nil _ -> Nil {}
        | Cons l -> Cons {
            , hd = f l.hd
            , tl = map f l.tl
          }
      end
}

