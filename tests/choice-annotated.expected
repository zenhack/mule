
Desugared:

	(fn choice
	 (let (choice ((: (all a (a -> (a -> a)))) choice))
	  (fix/record
	   (fn $0
	    (((.= x) (((.= y) {}) ((choice (fn x x)) (fn x x)))) ((choice {}) {}))))))

inferred type:

	(all a
	 (all b
	  (all c
	   (exist d
	    ((d -> (d -> d)) ->
	     (record (types (...c))
	      (values ((x (record (types (...b)) (values ()))) (y (a -> a))))))))))

Runtime term:

	(Lam
	 (0 ()
	  (App
	   ((Lam
	     (0 ()
	      (App
	       ((Fix Record)
	        (Lam
	         (1 ()
	          (Record
	           ((x (App ((App ((Var 1) (Record ()))) (Record ()))))
	            (y
	             (App
	              ((App ((Var 1) (Lam (0 () (Var 0))))) (Lam (0 () (Var 0))))))))))))))
	    (Var 0)))))

Evaluated:

	(Lam
	 (0 ()
	  (App
	   ((Lam
	     (0 ()
	      (App
	       ((Fix Record)
	        (Lam
	         (1 ()
	          (Record
	           ((x (App ((App ((Var 1) (Record ()))) (Record ()))))
	            (y
	             (App
	              ((App ((Var 1) (Lam (0 () (Var 0))))) (Lam (0 () (Var 0))))))))))))))
	    (Var 0)))))
