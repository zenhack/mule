
module C = Constraint_t
module GT = Graph_types
module DT = Desugared_ast_type

(**** Standard monad stuff ****)
type 'a t
val return : 'a -> 'a t
val bind : 'a t -> f:('a -> 'b t) -> 'b t
val map : 'a t -> f:('a -> 'b) -> 'b t

val build : Context.t -> C.polarity -> GT.bound_target -> 'a t -> 'a

(**** Shorthands for common type specializations ****)
type 'a vt = 'a GT.var t
type qt = GT.quant vt
type tt = GT.typ vt
type pt = GT.prekind vt
type gt = GT.guard vt
type kt = GT.kind vt

(**** Combinators ****)

(* Invert all the quantifiers generated by the argument. *)
val negate : 'a t -> 'a t

(* Constructs a function type: *)
val fn : qt -> qt -> tt

(* Infix alias for fn: *)
val ( **> ) : qt -> qt -> tt

val bottom : GT.bound_flag -> kt -> tt

val quant : DT.quantifier -> tt -> (qt -> tt) -> qt
val all   :                  tt -> (qt -> tt) -> qt
val exist :                  tt -> (qt -> tt) -> qt

(*
val guard : GT.guard -> gt
val kind : gt -> pt -> kt

val karrow : kt -> kt -> pt
val ktype : pt
val krow : pt
val kfree : pt

val with_kind : kt -> qt -> qt
  *)
